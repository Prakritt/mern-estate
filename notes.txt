npm create vite@latest client  -- > Client is the folder inside which we want to initialize react. 
Package.json contains the dependencies. In order to install it, just hit nom install 
extensions : react snippets, Auto Rename Tag , console ninja(used for console logging inside vs code), Prettier, Tailwind Css Intellisense
All the pages of the application will be placed inside the "Pages" folder inside the "src" folder.

npm install react-router-dom
Inside App.jsx:
    import { BrowserRouter, Routes, Route } from 'react-router-dom'
    return <BrowserRouter>
        <Routes>
        <Route path = "/" element={<Home/>}/>
        <Route path ="/sign-in" element={<SignIn/>}/>
        <Route path = "/sign-up" element={<SignUp/>}/>
        <Route path = "/profile" element ={<Profile/>}/>
        <Route path = "/about" element ={<About/>}/>
        
        </Routes>
    </BrowserRouter>




For components, components are stored inside "components" folder inside "src" folder. 
Header component will be placed between BrowserRouter and Route as: 
    <BrowserRouter>
  <Header/>
    <Routes>


We can get icons from the package react-icons: npm install react-icons:
    import {FaSearch} from 'react-icons/fa'

To redirect on a click:
    import {Link} from 'react-router-dom'
    Link redirects us from one page to the another without refreshing the page. 

While connecting to the database: 
    mongoose.connect("mongodb+srv://Prakrit:mongodb123@mern-estate.lf0bqat.mongodb.net/mern-estate?retryWrites=true&w=majority")
    mern-estate after / and before ? denoted the name of the cluster in the database. 


Model : 
 Models contains the rules and requirements so that the person communicating with the database follows these
 rules and regulations and create data based on these rules. 
 const userSchema = new mongoose.Schema({name:{type:String,unique:true}},{timestamps:true}
 api>models>user.model.js
 Inside the schema, setting the {timestamps : true} does the following : 
    a. Time of creation of user 
    b. time of update of user
    later while sorting these info can be used to sort them by latest time
Now, based on the schema, we create a model with the following line of code: 
const User = mongoose.model('User',userSchema) --> Mongodb will automatically add s and make 'User' as 'Users'


Creating a route : 
    request is the data that we get from the client side and response is the data that we send back from the server side. 
    We have a server and a client. The interaction between these two is performed by request and the response. 

The best practise is to create separate folder for api routes and the functions. It is the best practice to even put the
logic for handling the routes into a separate function. These logic and functions are called as controllers and 
are placed inside the controller folder. 


Creating an API sign Up route: 
    -Get the information like email and password
    - Hash the password
    -Save inside the database 
        - We create a separate file for the authentication and not place the authentication logic inside the user controller 


By default, we are not allowed to send any json to the server. We need to enable sending body of the request by : 
app.use(express.json())

The saving of the model takes time depending in the network speed. So, to prevent error, we use await. 
By doing this, the exection pauses until that lin of code is fully executed and then only moves to the next line.

For hashing the password
npm install bcryptjs

ERROR HANDLING WITH EXPRESS 
use try and catch statement and if error happens, send status 500. 
The error can be handled by using a middleware function. 
For each error occured in different function of the app, we have to use try and catch block. The part inside the 
try and catch block is almost same and repititive. 
There can sometimes be error which is not in the system but error like password strength is not enough.We need to create 
function that can handle such type of errors. 
Another folder : 
utils> error.js
    function errorHandler --- Takes statusCode and message as input 
    then use javascript constructor to create the error and add statuscode and message to the error and throw error or return error. 
We pass the error to the main error handling function as next(new error("statusCode","message"))
Then, on index.js, there will be main error handler app.use(err,req,res,next) and this function will be the ultimate end of the response cycle to return the response. 


For setting a proxy in the front-end:
Proxy enables communication between different origins during the development. 
export default defineConfig({
  server:{
    proxy: {
      '/api':{
        target:"http://localhost:3000",
        secure: false
      }
    }
  }
  ,
  plugins: [react()],
})
This is done in vite.config.js

In order to navigate after fulfilling certain actions, use the following
import{useNavigate} from 'react-router-dom'
navigate = useNavigate()
navigate('/location)


API::
Implementing the sign in functionality:
1.Check if the email exists.
    Done using User.findOne({email:email})
    
2. Check the password if email exists 
    compare the password using bcryptjs.compareSync(password,validUser.password)

3. If both are correct, we need to authenticate the user. 
This is done by adding cookie inside the browser. 
hash Token inside browser cookie contains email or the id of the user
Then each time the user wants to do something crucial, we check their authntication with the help of the token in the cookie

Creating token : 
json webtoken is used to create the hash of the user
import jwt from jsonwebtoken.
Generally, id is used for creating the token of the person because even if someone finds the id,
much information is not revealed with just the id. 
res.cookie('access-token',token,{httpOnlyLtrue,expires: new Date.now() + 60 * 1000}).status(200).json(validUser)


USING REDUX FOR GLOBAL STATE 
npm install @reduxjs/toolkit
npm install react-redux
After the installation, we need to create the store. 
https://redux-toolkit.js.org/tutorials/quick-start
Inside src, create a folder named redux and inside there, create a file named store
store.js : 
    import { configureStore } from '@reduxjs/toolkit'

    export const store = configureStore({
    reducer: {},
    })

    middleware: getDefaultMiddleware => getDefaultMiddleware({
    serializableCheck : false
  }) ---> By doing this, we will not get any error for not serializing the variables 
  For example, File object is not serializable. 
  Serializable data refers to the data that can be easily conveterd into a plain javascript object and later 
  be serilized into a string. 

  Now after creating the store, we need to provide the redux store to react. 
    import React from 'react'
    import ReactDOM from 'react-dom/client'
    import App from './App.jsx'
    import './index.css'
    import {store} from './redux/store.js'
    import { Provider } from 'react-redux'

    ReactDOM.createRoot(document.getElementById('root')).render(
    <Provider store={store}>
        <App />
    </Provider>
    )

Then, we need to create a slice. For example in order to create a slice for a user, inside redux, new folder user> user.slice.js
Then, the next step is to create a redux state slice: 



After that, we need to add the reducer to the store. 
In order to test the working, there is a chrome extension named redux dev tool.

We want to reuse the data because we dont want the user to enter data again and again each time he refreshes the page. 
For that, we need to store data in local storage of the browser. 


Adding redux persist : 
npm install redux-persist 
In store.js, we will combine the reducers and persist the recuer using persist reducer.

import { combineReducers, configureStore } from '@reduxjs/toolkit'
import userReducer from './../redux/user/user.slice'
import { persistReducer, persistStore } from 'redux-persist'
import storage from 'redux-persist/lib/storage'
const rootReducer = combineReducers({
    user: userReducer
})

const persistConfig = {
    key : 'root',
    storage,
    version : 1
}

const persistedReducer = persistReducer(persistConfig, rootReducer)

export const store = configureStore({
  reducer: {
    persistedReducer
  },
  middleware: getDefaultMiddleware => getDefaultMiddleware({
    serializableCheck : false
  })
})

export const persistor = persistStore(store)
Persistconfig stores the name of the key, version and the storage in the local storage 


Finally in main.js : 
import { Provider } from 'react-redux'
import { PersistGate } from 'redux-persist/integration/react'

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <App />

    </PersistGate>
  </Provider>
)



Using Google Auth 
First configure with google firebase.. 
- npm install firebase 
- src -> firebase.js 
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAhhQomXoSRJy0Bg_8hi_JeYDnRRhQbr6c",
  authDomain: "mernestate-4923f.firebaseapp.com",
  projectId: "mernestate-4923f",
  storageBucket: "mernestate-4923f.appspot.com",
  messagingSenderId: "920483808926",
  appId: "1:920483808926:web:ea7cb90ddc3ab2c177dd8f"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

Declaring environment variables using vite
VITE_FIREBASE_API_KEY="APPLEKEY"

Accessing the environmental variable: 
cont api_key = import.meta.env.VITE_FIREBASE_API_KEY

Status codes: 
201 : means that something is created.

404 : Not Found  
401 : Lacks valid authentication credentials. 