npm create vite@latest client  -- > Client is the folder inside which we want to initialize react. 
Package.json contains the dependencies. In order to install it, just hit nom install 
extensions : react snippets, Auto Rename Tag , console ninja(used for console logging inside vs code), Prettier, Tailwind Css Intellisense
All the pages of the application will be placed inside the "Pages" folder inside the "src" folder.

npm install react-router-dom
Inside App.jsx:
    import { BrowserRouter, Routes, Route } from 'react-router-dom'
    return <BrowserRouter>
        <Routes>
        <Route path = "/" element={<Home/>}/>
        <Route path ="/sign-in" element={<SignIn/>}/>
        <Route path = "/sign-up" element={<SignUp/>}/>
        <Route path = "/profile" element ={<Profile/>}/>
        <Route path = "/about" element ={<About/>}/>
        
        </Routes>
    </BrowserRouter>



For components, components are stored inside "components" folder inside "src" folder. 
Header component will be placed between BrowserRouter and Route as: 
    <BrowserRouter>
  <Header/>
    <Routes>


We can get icons from the package react-icons: npm install react-icons:
    import {FaSearch} from 'react-icons/fa'

To redirect on a click:
    import {Link} from 'react-router-dom'
    Link redirects us from one page to the another without refreshing the page. 

While connecting to the database: 
    mongoose.connect("mongodb+srv://Prakrit:mongodb123@mern-estate.lf0bqat.mongodb.net/mern-estate?retryWrites=true&w=majority")
    mern-estate after / and before ? denoted the name of the cluster in the database. 


Model : 
 Models contains the rules and requirements so that the person communicating with the database follows these
 rules and regulations and create data based on these rules. 
 const userSchema = new mongoose.Schema({name:{type:String,unique:true}},{timestamps:true}
 api>models>user.model.js
 Inside the schema, setting the {timestamps : true} does the following : 
    a. Time of creation of user 
    b. time of update of user
    later while sorting these info can be used to sort them by latest time
Now, based on the schema, we create a model with the following line of code: 
const User = mongoose.model('User',userSchema) --> Mongodb will automatically add s and make 'User' as 'Users'